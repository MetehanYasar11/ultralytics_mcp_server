# Docker Compose for Production Deployment
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  ultra-api:
    # Production image with specific tag
    image: ghcr.io/your-org/ultra-api:${ULTRA_API_TAG:-latest}
    
    # Production restart policy
    restart: always
    
    # Production environment variables
    environment:
      - ULTRA_API_KEY=${ULTRA_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
    
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-8G}
          cpus: '4.0'
        reservations:
          memory: ${MEMORY_RESERVATION:-4G}
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Production volumes with specific paths
    volumes:
      - ${DATASETS_PATH:-/data/datasets}:/datasets:rw
      - ${RUNS_PATH:-/data/runs}:/runs:rw
      - ${CONFIG_PATH:-./config}:/app/config:ro
      - ${LOGS_PATH:-./logs}:/app/logs:rw
      - ultralytics-cache:/root/.cache/ultralytics
    
    # Production healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 60s
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=ultralytics-api"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Production labels
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ultra-api.rule=Host(`api.ultralytics.yourdomain.com`)"
      - "traefik.http.routers.ultra-api.tls=true"
      - "traefik.http.routers.ultra-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.ultra-api.loadbalancer.server.port=8000"

  # Production reverse proxy (optional)
  traefik:
    image: traefik:v3.0
    container_name: ultralytics-traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - traefik-certs:/certs
    networks:
      - ultralytics-network
      - web
    profiles:
      - proxy

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ultralytics-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultralytics-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ultralytics-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - ultralytics-network
    profiles:
      - monitoring

volumes:
  traefik-certs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  web:
    external: true
